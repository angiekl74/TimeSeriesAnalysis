install.packages("faraway")
data=(package='faraway')
data(package='faraway')
ls()
coagulation
data(coagulation, package='faraway')
coagulation
plot( coag ~ diet, data=coagulation)
summary(coagulation)
coagulation$diet
coagulation$coag
(63+67+71+64+65)/5
(62+60+63+59)/4
data(rats, package='faraway')
rats
plot( poison ~ time, data=rats)
plot(time ~ poison, data=rats)
plot(time ~ treat, data=rats)
chooseCRANmirror()
data(package=’faraway’)
data(package = 'faraway')
worldcup
ls()
data(worldcup, package = 'faraway')
worldcup
mean(worldcup$Time)
summary(worldcup)
sd(worldcup)
data.1 = c(10, 20, 30, 40 ,50)
data.1
summary(data.1)
mean(data.1)
sum(data.1)
sum(data.1)/5
sd(data.1)
data.2=c(1,1,1,1,1)
sd(data.2)
hist(data.1)
hist(data.1, freq=FALSE)
hist(data.1, freq=FALSE, color='blue')
hist(data.1, freq=FALSE, col='blue')
density(data.1)
lines(density(data.1))
lines(density(data.1), col='red')
lines(density(data.1), col='red', lwd=10)
set.seed=2016
Test_1_scores=round(rnorm(50, 78, 10))
Test_1_scores
Test_2_scores=round(rnorm(50, 70, 14))
Test_2_scores
hist(Test_1_scores)
hist(Test_2_scores)
plot(Test_2_scores~Test_1_scores)
plot(Test_1_scores~Test_2_scores)
plot(Test_2_scores~Test_1_scores)
plot(Test_2_scores~Test_1_scores, main='Test scores for two exams (50 students)', xlab='Test_1_scores', ylab='Test 2 scores', col='yellow')
co=co2
co
help(co2)
class(co2)
plot(co2, main='Atmospheric CO2 Concentration')
plot(co2)
hist(co2)
par(mfrow=c(1,3))
( c02.residuals = resid( co2.linear.model ) )
hist(co2.residuals, main= "Histogram of CO2 Residuals")
qqnorm(c02.residuals, main= "Normal Probability Plot")
qqline(c02.residuals)
plot(c02.residuals ~ time(co2), main="Residuals on Time")
par(mfrow=c(1,3))
( c02.residuals = resid( co2.linear.model ) )
( co2.residuals = resid( co2.linear.model ) )
hist(co2.residuals, main= "Histogram of CO2 Residuals")
plot(co2, main='Atmospheric CO2 Concentration with Fitted Line')
abline(co2.linear.model )
co2
co2.values = as.numeric(co2)
co2.values
co2.times = as.numeric( time(co2) )
co2.times
co2.linear.model = lm(co2 ~ time(co2) )
plot(co2, main='Atmospheric CO2 Concentration with Fitted Line2')
co2.fitted.values = slope*co2.times + intercept
( co2.residuals = resid( co2.linear.model ) )
hist( co2.residuals)
abline(co2.linear.model = lm(co2 ~ time(co2) ))
abline(co2.linear.model = lm(co2 ~ time(co2) ))
time(co2)
time(worldcup)
co2
intercept
(co2.linear.model = lm(co2 ~ time(co2) ))
co2.linear.model = lm(co2 ~ time(co2) )
co2.linear.model
plot(co2, main='Atmospheric CO2 Concentration with Fitted Line2')
abline(co2.linear.model)
co2.residuals = resid(co2.linear.model)
(co2.residuals = resid(co2.linear.model))
hist(co2.residuals, main='Angie's plot)
hist(co2.residuals)
hist(co2.residuals, main="Histogram of residual plot")
qqnorm(co2.residuals)
qqline(co2.residuals)
qqnorm(co2.residuals)
qqline(co2.residuals)
plot(co2.residuals~time(co2)), xlim=c(1960, 1963), main="Zoom In"
plot(co2.residuals~time(co2), xlim=c(1960, 1963), main="Zoom In")
plot(co2.residuals~time(co2), xlim=c(1970, 1975), main="1970-1975")
help(sleep)
sleep
plot(extra~group, data=sleep, main="Extra sleep by group")
plot(extra~ID, data=sleep, main="Extra sleep by group")
extra.1=extra[group==1]
plot(extra~group, data=sleep, main="Extra sleep by group")
extra.1=extra[group==1]
extra.1=extra(group==1)
attach(sleep)
extra.1=extra[group==1]
extra.2=extra[group==2]
extra.1
t.test(extra.1, extra.2, paired=True,alternative="two.sided" )
t.test(extra.1, extra.2, paired=TRUE,alternative="two.sided" )
help(tress)
help(trees)
trees
pairs(trees, pch=21, bg=c('red'))
pairs(trees, pch=10, bg=c('red'))
pairs(trees, pch=40, bg=c('red'))
pairs(trees, pch=21, bg=c('red'))
pairs(trees, pch=21, bg=c('blue'))
cov(trees)
cor(trees)
pairs(trees, pch=100, bg=c('blue'))
pairs(trees, pch=1, bg=c('blue'))
pairs(trees, pch=10, bg=c('blue'))
data=c(37, 86, 79, 95, 61, 93, 19, 98, 121, 26, 39, 11, 26, 75, 29,130, 42, 8)
summary(data)
library(faraway)
ls()
cheddar
m=lm(taste~H2S, data=cheddar)
m
lm()$fitted
data(package='astsa')
data(package='astsa')
install.packages("astsa")
ls()
data(package='astsa')
ls()
astsa
data(package='astsa')
data(jj, package='astsa')
jj
plot(data='jj')
help(astsa)
require(astsa)
help("astsa")
help(jj)
plot(jj, type='o', main='Quarterly Earning JJ', ylab="Earnings, xlab='Years')
help(jj)
require(astsa)
help(jj)
plot(jj, type='o')
plot(jj, type='o', main="Quarterly Earnings JJ")
plot(jj, type='o', main="Quarterly Earnings JJ", )
plot(jj, type='o', main="Quarterly Earnings JJ", ylab="Earnings", xlab="Years" )
plot(jj, type='o', main="Quarterly Earnings JJ", ylab="Earnings", xlab="Years", col="green")
plot(flu)
flu
plot(flu, type='x', main="Quarterly Earnings JJ", ylab="Earnings", xlab="Years", col="green")
plot(flu)
plot(flu, type="x")
plot(flu, type="o")
cov(flu)
prp=ts(rnorm(100))
prp
print(prp)
plot(prp)
(acf(prp, type='covariance'))
(acf(prp))
acf(prp)
acf(prp, main"Correlogram")
acf(prp, main="Correlogram")
acf(prp)
acf(prp, main="Correlogram")
(acf(prp, main="Correlogram"))
x=NULL
x[1]=0
for(i in 2:100){}
for(i in 2:100){x[i]=x[i-1]+rnorm(1)}
print(x)
random_walk=ts(x)
random_walk
plot(random_walk)
acf(random_walk)
diff(random_walk)
plot(diff(random_walk))
acf(diff(random_walk))
jj
sarima(log(jj), 0,1,1,1,1,0,4)
model = sarima(log(jj), 0,1,1,1,1,0,4)
forecast(model)
plot(forecast(model))
install.packages("forecast")
plot(forecast(model))
forecast
ls()
install.packages("WDI")
library("WDI")
gdp<-WDI(country-c("US"), indicator = c("NY.GDP.PCAP.CD"), start=1960, end=2016)
gdp<-WDI(country=c("US"), indicator = c("NY.GDP.PCAP.CD"), start=1960, end=2016)
print(gdp)
head(gdp)
names(gdp)<-c("iso2c","country","GDPperCap", "year")
head(gdp)
gdp<-gdp[order(gdp$year)]
gdp<-gdp[order(gdp$year),]
head(gdp)
plot(GDPperCap~year)
plot(GDPperCap~year, data=gdp)
us<-ts(gdp$GDPperCap, start=min(gdp$year), end=max(gdp$max))
us<-ts(gdp$GDPperCap, start=min(gdp$year), end=max(gdp$year))
head(us)
print(us)
us
install.packages("forecast")
library("forecast")
usOPT<-auto.arima(us)
usOPT
coef(usOPT)
predict(usOPT, n.ahead=5, se.fit=T)
GDPUSAForecast<-forecast(object = usOPT, h=5)
GDPUSAForecast
plot(GDPUSAForecast)
GDPUSAForecast
acf(us, main=”Correlogram”)
acf(us)
pacf(us)
acf(us)
pacf(us)
setwd("C:/Users/Lenovo/GitHub/TimeSeriesAnalysis")
shampoo <- read.csv("Resources/ShampooData.csv", stringsAsFactors = FALSE)
shampoo
names(shampoo)<-c("month","sales")
str(shampoo)
sales<-ts(shampoo$sales)
install.packages("forecast")
salesOPT<-auto.arima(sales)
library("forecast")
salesOPT<-auto.arima(sales)
salesOPT
SalesForecast<-forecast(object = salesOPT, h=12)
SalesForecast
